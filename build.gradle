group 'javan-warty-pig'
version '0.1.0'

buildscript {
    ext.kotlin_version = '1.2.20'
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.kotlin:kotlin-native-gradle-plugin:+'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

project(':agent') {
    apply plugin: 'konan'

    def jdkHome = file(System.properties.'java.home').parentFile.toPath()
    def includeBase = jdkHome.resolve('include')
    def includeWin32 = includeBase.resolve('win32')

    konanArtifacts {
        interop('jvmti') {
            target 'mingw', {
                includeDirs includeBase, includeWin32
            }
        }

        dynamic('agent') {
            enableOptimizations true
            libraries {
                artifact 'jvmti'
            }
            target 'mingw', {
                linkerOpts '-I', '\\"' + includeBase.toString() + '\\"',
                        '-I', '\\"' + includeWin32.toString() + '\\"'
            }
        }
    }
}

project(':fuzz') {

    apply plugin: 'kotlin'
    apply plugin: 'application'
    apply plugin: 'org.jetbrains.dokka'

    applicationName = 'jwp-fuzz'
    mainClassName = 'jwp.fuzz.cli.MainKt'

    distTar.archiveName = 'jwp-fuzz.tar'
    distZip.archiveName = 'jwp-fuzz.zip'

    dependencies {
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.2'
        testRuntime 'org.junit.vintage:junit-vintage-engine:4.12.2'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.2'
        testRuntime 'org.junit.platform:junit-platform-console:1.0.2'
    }

    kotlin.experimental.coroutines 'enable'
    compileKotlin.kotlinOptions.jvmTarget = '1.8'
    compileTestKotlin.kotlinOptions.jvmTarget = '1.8'
    compileTestKotlin.dependsOn(":agent:build")
    // We override the test task here because the agent isn't working otherwise
    test {
        dependsOn 'runJunit'
        onlyIf { false }
    }
    task runJunit(type: JavaExec) {
        jvmArgs '-agentpath:../agent/build/konan/bin/mingw/agent.dll'
        classpath = project.sourceSets.test.runtimeClasspath
        main 'org.junit.platform.console.ConsoleLauncher'
        args '--scan-class-path'
        args '--details', 'none'
    }

    dokka {
        outputFormat = 'javadoc'
        jdkVersion = 8
        externalDocumentationLink {
            url = new URL("https://docs.oracle.com/javase/8/docs/api/")
        }
    }
}

project(':examples') {
    subprojects {
        apply plugin: 'kotlin'
        apply plugin: 'application'
        dependencies {
            compile project(':fuzz')
        }
        run.systemProperties System.properties
        applicationDefaultJvmArgs = ['-agentpath:../../agent/build/konan/bin/mingw/agent.dll']
    }
}

project(':examples:simple') {
    mainClassName = 'jwp.examples.simple.Main'
}

project(':examples:csv') {
    mainClassName = 'jwp.examples.csv.Main'
}